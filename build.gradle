import org.jetbrains.kotlin.gradle.dsl.ExplicitApiMode
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {

    ext.compileJavaVersion = "11"


    //dependencies
    //https://github.com/Kotlin/kotlinx.coroutines
    ext.coroutinesVersion = "1.7.3"
    //https://github.com/junit-team/junit5/releases
    ext.junit5Version = "5.10.0"
    //https://github.com/junit-team/junit4/releases
    ext.junit4Version = "4.13.2"
    //https://github.com/JetBrains/kotlin/releases
    ext.kotlin_version = "1.9.20"
    //https://github.com/csense-oss/csense-kotlin-annotations
    ext.csenseAnnotationVersion = "0.1.0-Beta"

    //versions & naming
    ext.csenseVersionName = "0.1.0-Beta"
    ext.csenseGroupId = "csense.kotlin"
    ext.csenseArtifactId = "csense-kotlin-tests"

    //repo settings
    ext.csenseUserOrg = "csense-oss"
    ext.csenseRepoName = "maven"

    ext.csenseGithub = "csense-oss/csense-kotlin-tests"
    ext.csenseLicense = "MIT"
    ext.csenseLicenseUrl = "https://mit-license.org/"

    ext.csenseDeveloperAlias = "tvede-dk"
    ext.csenseDeveloperName = "Kasper Tvede"
    ext.csenseDeveloperEmail = "csenseoss@tvedesys.dk"

    ext.readme = "readme.md"
    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin-tests"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin-tests.git"
    ext.csenseArtifactDescription = "A library for writing tests with a focus on simple test features (assertions)"

}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version "$kotlin_version"
    id "maven-publish"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://pkgs.dev.azure.com/csense-oss/csense-oss/_packaging/csense-oss/maven/v1'
        name 'csense-oss'
    }
}

group project.csenseGroupId
version project.csenseVersionName

kotlin {
    explicitApi = ExplicitApiMode.Strict
    jvm {
        compilations.configureEach {
            kotlinOptions.jvmTarget = compileJavaVersion
        }
        withJava()
    }
    js(IR) {
        browser()
        nodejs()
    }


    //Native targets, based on https://kotlinlang.org/docs/native-target-support.html
    //- tier 1
//    macosX64()
//    macosArm64()
//    iosSimulatorArm64()
//    iosX64()

    //- tier 2
    linuxX64()
    linuxArm64()
//    watchosSimulatorArm64()
//    watchosX64()
//    watchosArm32()
//    watchosArm64()
//    tvosSimulatorArm64()
//    tvosX64()
//    tvosArm64()
//    iosArm64()

    //- tier 3
    androidNativeArm32()
    androidNativeArm64()
    androidNativeX86()
    androidNativeX64()
    mingwX64()
    androidNativeX64()
//    watchosDeviceArm64()
    //end native targets


    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "csense.kotlin:csense-kotlin-annotations:$csenseAnnotationVersion"
            }
        }

        jvmMain {
            dependencies {
                api "org.junit.jupiter:junit-jupiter-api:$junit5Version"
                api "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
                api "org.junit.vintage:junit-vintage-engine:$junit5Version"
                api "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
            }
        }

        jsMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
            }
        }
    }
}


project.group = csenseGroupId
project.version = csenseVersionName


apply from: "$rootDir/gradle/publish.gradle"


kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(compileJavaVersion))
    }
}


// warnings as errors
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions.allWarningsAsErrors = true
}

//progressive mode & api version + optIns
kotlin.sourceSets.configureEach {
    languageSettings {
        progressiveMode = true
        languageVersion = "1.9"
        optIn("kotlin.contracts.ExperimentalContracts")
    }
}

