buildscript {
    //dependencies
    ext.coroutinesVersion = "1.3.7"
    ext.junit5Version = "5.6.2"
    ext.kotlin_version = "1.4-M3"


    //versions & naming
    ext.csenseVersionName = "0.0.37"
    ext.csenseGroupId = "csense.kotlin"
    ext.csenseArtifactId = "csense-kotlin-tests"

    //repo settings
    ext.csenseUserOrg = "csense-oss"
    ext.csenseRepoName = "maven"

    ext.csenseGithub = "csense-oss/csense-kotlin-tests"
    ext.csenseLicense = "MIT"
    ext.readme = "readme.md"
    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin-tests"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin-tests.git"
    ext.csenseArtifactDescription = "A library for writing tests with a focus on simple features (assertions)"
    ext.csenseVersionDescription = ""

}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version "1.4-M3"
    id 'org.jetbrains.dokka' version "0.10.1"
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.5"
}

repositories {
    jcenter()
    maven { url 'https://dl.bintray.com/kotlin/kotlinx' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
}

group project.csenseGroupId
version project.csenseVersionName

kotlin {
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jvmMain {
            dependencies {
                api "org.junit.jupiter:junit-jupiter-api:$junit5Version"
                api "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
                api 'junit:junit:4.13'
                api "org.junit.vintage:junit-vintage-engine:$junit5Version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
                api "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
                api "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
                implementation kotlin('stdlib-jdk8')
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutinesVersion"
                api "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
            }
        }

    }
}

kotlin.sourceSets.all {
    languageSettings.progressiveMode = true
}

dokka {
    multiplatform {
        global {
            perPackageOption {
                prefix = "csense.kotlin.tests"
                suppress = true
            }
        }
        js {}
        jvm {}
    }
}

bintrayUpload.dependsOn("dokka")

bintray {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties')?.newDataInputStream())
        user = properties.getProperty('bintrayUser')
        key = properties.getProperty('bintrayApiKey')
    } catch (Exception ignored) {
        print "could not read local.properties"
    }
    publications = publishing.publications.getNames()
    override = true
    publish = false
    pkg {
        repo = project.csenseRepoName
        userOrg = project.csenseUserOrg
        vcsUrl = project.csenseGit
        licenses = project.csenseLicense
        name = project.csenseArtifactId
    }
}


task uploadProd(dependsOn: ["assemble", "allTests", "dokka", "javadocJar", "bintrayUpload"])



task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "$buildDir/dokkaJavadoc"
}

final def javaDocJarTask = task("javadocJar", type: Jar, dependsOn: "dokkaJavadoc") {
    archiveClassifier.set('javadoc')
    from "${project.buildDir}/dokkaJavadoc"
}


publishing {
    publications {
        jvm {
            artifact(javaDocJarTask)
        }
    }
}
